# print('Hello world')

# Ввод и вывод данных
# print('Введите a')
#a = input();
#print('Введите b')
#b = input();
#print(a, b)
#print('{} -- {}'.format(a,b))

#print('Введите a')
#a = input();
#print('Введите b')
#b = input();
#c = 30
#print(a, '+', b, '=', c)

#print('Введите a')
#a = int(input());
#print('Введите b')
#b = int(input());
#c = 30
#print(a, '+', b, '=', c)
#print('{} + {} = {}'.format(a, b, c))

#a = int(input('Введите a'))
#b = int(input('Введите b'))
#c = 33
#print('{} + {} = {}'.format(a, b, c))

#a = int(input('Введите \na: '))
#b = int(input('Введите \nb: '))
#c = 33
#print('{} + {} = {}'.format(a, b, c))

#Арифметические операции
# + (сложение),- (вычитание),* (умножение),/ (деление),
# % (остаток от деления),// (деление нацело),** (возведение в степень).

# += увеличивает значение левого операнда на значение правого операнда 
# и присваивает измененное значение обратно левому операнду. 
# Например,если a = 10, b = 20 => a+ = b будет равно 30.

# Логические операции
# and	Если оба выражения истинны, то условие будет истинным. 
# or	Если одно из выражений истинно, то условие будет истинным. 
# not	Если выражение a истинно, то not (a) будет ложным, и наоборот.

# Побитовые операторы
# &	 Если оба бита в одном и том же месте двух операндов равны 1, 
#    то в результат копируется 1. Иначе копируется 0.
# \| Результирующий бит будет равен 0, если оба бита равны нулю; иначе равен 1.
# ^	 Результирующий бит будет равен 1, если оба бита различны; иначе будет 0.
# ~	 Он вычисляет отрицание каждого бита операнда, т.е. если бит равен 0, 
#    то будет 1 и наоборот.
# << Значение левого операнда сдвигается влево на количество битов, 
#    присутствующих в правом операнде.
# >> Левый операнд сдвигается вправо на количество битов, 
#    присутствующих в правом операнде.

# Управляющие конструкции 
